{"version":3,"sources":["Components/Button/Button.jsx","Components/ContactForm/ContactForm.jsx","Components/Input/Input.jsx","Components/Filter/Filter.jsx","Components/ContactList/ContactList.jsx","Components/ContactsListItem/ContactsListItem.jsx","App.js","index.js"],"names":["Button","btnType","btnName","onClick","classButton","type","className","defaultProps","ContactForm","handleSubmit","handleChange","name","number","nameInputId","nanoid","numberInputId","onSubmit","htmlFor","value","pattern","title","required","onChange","id","ButtonEl","map","Input","classInput","classLabel","generateID","Filter","ContactsList","children","ContactsListItem","onDelete","contacts","isFirstRender","App","useState","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","setName","setNumber","propsId","useEffect","setItem","stringify","event","target","reset","preventDefault","some","contact","includes","alert","length","normalizedFilter","toLocaleLowerCase","handleFilter","contactId","delContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83b0ddd9.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Button = ({ btnType, btnName, onClick , classButton}) => {\r\n    return (<>\r\n            <button type={btnType} onClick={onClick} className={classButton}>{btnName}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    btnType: \"button\",\r\n}\r\n\r\nButton.propTypes = {\r\n  btnType: PropTypes.string.isRequired,\r\n  btnName: PropTypes.string.isRequired,\r\n  price: PropTypes.func,\r\n  classButton: PropTypes.string,\r\n};\r\n\r\nexport default Button","import { nanoid } from 'nanoid';\r\n\r\nimport Button from '../Button';\r\n\r\nimport ButtonEl from './ButtonEl.json';\r\n\r\nimport './ContactForm.scss'\r\n\r\nconst ContactForm = ({handleSubmit,handleChange, name, number}) => {\r\n    const nameInputId = nanoid();\r\n    const numberInputId = nanoid();\r\n\r\n    return (\r\n        <form className=\"form-container\" onSubmit={handleSubmit}>\r\n            <label htmlFor={nameInputId} className=\"form-label\">Name</label>\r\n            <input\r\n                className=\"form-input\"\r\n                type=\"text\"\r\n                value={name}\r\n                name=\"name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n                onChange={handleChange}\r\n                id={nameInputId}\r\n            />\r\n            <label htmlFor={numberInputId} className=\"form-label\">Number</label>\r\n            <input\r\n                className=\"form-input\"\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                required\r\n                onChange={handleChange}\r\n                id={numberInputId}\r\n            />\r\n            {ButtonEl.map(({ btnType, btnName }) => {\r\n                return (<Button\r\n                    btnType={btnType}\r\n                    btnName={btnName}\r\n                    key={btnName}\r\n                    classButton=\"form-button\"\r\n                />)\r\n            })}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactForm\r\n\r\n// class OldContactForm extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         number: '',\r\n//     };\r\n\r\n//     nameInputId = nanoid();\r\n//     numberInputId = nanoid();\r\n\r\n//     handleChange = event => {\r\n//         const { name, value } = event.currentTarget;\r\n\r\n//         this.setState({ [name]: value });\r\n//     };\r\n\r\n//     handleSubmit = event => {\r\n//         event.preventDefault();\r\n//         this.props.onSubmit({ id: nanoid(), ...this.state });\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({ name: '', number: '', });\r\n//     };\r\n\r\n//     render() {\r\n//         const { name, number } = this.state;\r\n\r\n//         return (\r\n//             <form className=\"form-container\" onSubmit={this.handleSubmit}>\r\n//                 <label htmlFor={this.nameInputId} className=\"form-label\">Name</label>\r\n//                 <input\r\n//                     className=\"form-input\"\r\n//                     type=\"text\"\r\n//                     value={name}\r\n//                     name=\"name\"\r\n//                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                     required\r\n//                     onChange={this.handleChange}\r\n//                     id={this.nameInputId}\r\n//                 />\r\n//                 <label htmlFor={this.numberInputId} className=\"form-label\">Number</label>\r\n//                 <input\r\n//                     className=\"form-input\"\r\n//                     type=\"tel\"\r\n//                     name=\"number\"\r\n//                     value={number}\r\n//                     pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n//                     title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n//                     required\r\n//                     onChange={this.handleChange}\r\n//                     id={this.numberInputId}\r\n//                 />\r\n//                 {ButtonEl.map(({ btnType, btnName }) => {\r\n//                     return (<Button\r\n//                         btnType={btnType}\r\n//                         btnName={btnName}\r\n//                         key={btnName}\r\n//                         classButton=\"form-button\"\r\n//                     />)\r\n//                 })}\r\n//             </form>\r\n//         )\r\n//     }\r\n// }\r\n","import Proptypes from 'prop-types'\r\n\r\nconst Input = ({ type, value, name, pattern, title, id, onChange, classInput, classLabel }) => {\r\n  return (<>\r\n        <label htmlFor={id} className={classLabel}>{name}</label>\r\n        <input\r\n          className={classInput}\r\n          type={type}\r\n          value={value}\r\n          name={name}\r\n          pattern={pattern}\r\n          title={title}\r\n          id={id}\r\n          onChange={onChange}\r\n          required/>  \r\n        </>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n  type: Proptypes.string.isRequired,\r\n  value: Proptypes.string.isRequired,\r\n  name: Proptypes.string,\r\n  pattern: Proptypes.string,\r\n  title: Proptypes.string,\r\n  id: Proptypes.string.isRequired,\r\n  onChange: Proptypes.func.isRequired,\r\n  classInput: Proptypes.string,\r\n  classLabel: Proptypes.string,\r\n}\r\n\r\nexport default Input","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport Input from '../Input';\r\n\r\nimport './Filter.scss'\r\n\r\nconst generateID = nanoid();\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <Input\r\n    value={value}\r\n    onChange={onChange}\r\n    type=\"text\"\r\n    id={generateID}\r\n    name=\"Find contacts by name\"\r\n    classLabel=\"filter-label\"\r\n    classInput=\"filter-input\"\r\n  />\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport './ContactList.scss'\r\n\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"contacts-list\">{ children }</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;","import PropTypes from 'prop-types';\r\n\r\nimport Button from \"../Button\";\r\n\r\nimport './ContactsListItem.scss'\r\n\r\nconst ContactsListItem = ({ onDelete, contacts }) => (\r\n  <>\r\n    {contacts.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className=\"contact-item\">\r\n          {name}: {number}\r\n          <Button\r\n            btnType=\"button\"\r\n            btnName=\"Delete\"\r\n            onClick={() => onDelete(id)}\r\n            classButton=\"contact-button\"\r\n          />\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactsListItem","import React, { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport ContactForm from \"./Components/ContactForm\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\nimport ContactsListItem from \"./Components/ContactsListItem\";\n\nimport \"./App.scss\";\n\nlet isFirstRender = true;\n\nconst App = () => {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(\"contacts\")) ?? [];\n  });\n  const [filter, setFilter] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const propsId = nanoid();\n\n  useEffect(() => {\n    if (isFirstRender) {\n      isFirstRender = false;\n      return;\n    }\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      case \"filter\":\n        setFilter(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setContacts(() => {\n      if (contacts.some((contact) => contact.name.includes(name))) {\n        alert(`${name} is already in contacts`);\n        return;\n      }\n\n      return [...contacts, { id: propsId, name, number }];\n    });\n\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const deleteHandler = (contactId) => {\n    const delContact = contacts.filter((contact) => contact.id !== contactId);\n    setContacts(delContact);\n  };\n\n  const handleFilter = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContactList = contacts.filter((contact) =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n    return filteredContactList;\n  };\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"title\">Phonebook</h2>\n      <ContactForm\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        name={name}\n        number={number}\n      />\n\n      <h2 className=\"secondary-title\">Contacts</h2>\n      {contacts.length > 0 ? (\n        <>\n          <Filter onChange={handleChange} value={filter} />\n          <ContactList>\n            <ContactsListItem\n              contacts={handleFilter()}\n              onDelete={deleteHandler}\n            />\n          </ContactList>\n        </>\n      ) : (\n        <span className=\"contact-message\">You have no contacts yet </span>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n// class OldApp extends Component {\n//   state = {\n//     contacts: [],\n//     // contacts: [\n//     //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n//     //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n//     //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n//     //   { id: \"id-4\", nnme: \"Annie Copeland\", number: \"227-91-26\" },\n//     // ],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const locStorContacts = localStorage.getItem(\"contacts\");\n//     const parsedContacts = JSON.parse(locStorContacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n// formSubmitHandler = (data) => {\n//   const isInContacts = (contact) => {\n//     return contact.name === data.name;\n//   };\n//   if (this.state.contacts.some(isInContacts)) {\n//     alert(`${data.name} is already in contacts`);\n//   } else\n//     this.setState((prevState) => ({\n//       contacts: [...prevState.contacts, data],\n//     }));\n// };\n\n// filterHandler = (event) => {\n//   const { value } = event.currentTarget;\n//   this.setState({ filter: value });\n// };\n\n// deleteHandler = (contactId) => {\n//   this.setState((prevState) => ({\n//     contacts: prevState.contacts.filter(\n//       (contact) => contact.id !== contactId\n//     ),\n//   }));\n// };\n\n//   render() {\n//     const { contacts, filter } = this.state;\n\n// const normalizedFilter = filter.toLocaleLowerCase();\n// const filteredContactList = contacts.filter((contact) =>\n//   contact.name.toLocaleLowerCase().includes(normalizedFilter)\n// );\n//     return (\n//       <div className=\"container\">\n//         <h2 className=\"title\">Phonebook</h2>\n//         <ContactForm onSubmit={this.formSubmitHandler} />\n\n//         <h2 className=\"secondary-title\">Contacts</h2>\n//         {contacts.length > 0 ? (\n//           <>\n//             <Filter onChange={this.filterHandler} value={filter} />\n//             <ContactList>\n//               <ContactsListItem\n//                 contacts={filteredContactList}\n//                 onDelete={this.deleteHandler}\n//               />\n//             </ContactList>\n//           </>\n//         ) : (\n//           <span className=\"contact-message\">You have no contacts yet </span>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}